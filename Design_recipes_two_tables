Two Tables Design Recipe Template

1. Extract nouns from the user stories or specification

As a social network user,
So I can have my information registered,
I'd like to have a user account with my email address.

As a social network user,
So I can have my information registered,
I'd like to have a user account with my username.

As a social network user,
So I can write on my timeline,
I'd like to create posts associated with my user account.

As a social network user,
So I can write on my timeline,
I'd like each of my posts to have a title and a content.

As a social network user,
So I can know who reads my posts,
I'd like each of my posts to have a number of views.

Nouns:

user
email address, username, posts

posts
user, posts_title, content, views


2. Infer the Table Name and Columns

user    email address, username, timeline
posts   title, content, views


3. Decide the column types.

# EXAMPLE:

Table: user
id: SERIAL
email_address: text
username: text
posts: text

Table: posts
id: SERIAL
title: text
content: text 
views: text

FOREIGN KEY: user 


# 4. Decide on The Tables Relationship 


Can one user have many post? (Yes) (foreign key)

A user has many posts
The foreign key is in the user (b) 
A post belongs to a user (foreign key is on the user)


# 4. Write the SQL.

-- EXAMPLE
-- file: posts.sql 

-- Replace the table name, columm names and types.

-- Create the table without the foreign key first.
CREATE TABLE user (
  id SERIAL PRIMARY KEY,
  "email address" text
  "user_name" text
   "posts" text
);


-- Then the table with the foreign key. 
CREATE TABLE students (
  id SERIAL PRIMARY KEY,
  student_name text,
  cohort_name text,
-- The foreign key name is always {other_table_singular}_id
  cohort_id int,
  constraint fk_cohort foreign key(cohort_id)
    references students(id)
    on delete cascade
);

-- EXAMPLE
-- file: comments.sql 


5. psql -h 127.0.0.1 database_name < albums_table.sql


psql -h 127.0.0.1 database_name < albums_table.sql
